Личный финансовый трекер.



Цель:

Разработка серверной части многопользовательского приложения для управления личными финансами.
Приложение должно позволять пользователям регистрироваться, добавлять, редактировать и удалять транзакции,
отслеживать баланс, анализировать расходы и доходы, указывать долгосрочные цели и контроллировать их выполнение.
Бэкэнд будет включать авторизацию, обработку CRUD-операций для транзакций, работу с базой данных,
API для фронтенда и возможность формирования отчётов.



На первом уроке мы используем только Java Core и коллекции.

Приложение должно быть консольным.



Основные функции:

1. Регистрация и авторизация пользователей

- Возможность регистрации новых пользователей с уникальным email и паролем.

- Вход в систему с проверкой email и пароля.

2. Управление пользователями

- Возможность редактирования профиля пользователя (имя, email, пароль).

- Возможность удаления аккаунта.

3. Управление финансами (CRUD-операции)

- Создание транзакции: Пользователь может добавить доход или расход, указав сумму, категорию, дату и описание.

- Редактирование транзакции: Возможность изменения суммы, категории и описания.

- Удаление транзакции: Удаление конкретной записи из списка.

- Просмотр транзакций: Возвращение списка всех транзакций пользователя с возможностью фильтрации по дате, категории или типу (доход/расход).

4. Управление бюджетом

- Установка месячного бюджета.

- Отслеживание превышения бюджета и уведомление об этом.

5. Управление целями

- Установка цели (накопления)

- отслеживание прогресса по цели

6. Статистика и аналитика

- Подсчёт текущего баланса.

- Расчёт суммарного дохода и расхода за определённый период.

- Анализ расходов по категориям.

- Формирование отчёта для пользователя по финансовому состоянию.

7. Уведомления

- API для напоминаний о достижении лимитов расходов.

- Возможность интеграции с email-уведомлениями.

8. Администрирование

- Администраторы могут просматривать список пользователей и их транзакций.

- Возможность блокировки или удаления пользователей.



Технические требования:

- Приложение должно быть написано на Java.

- Приложение должно быть консольным.

- Использовать чистую Java без сторонних библиотек (без Spring и т. д.).

- Данные должны храниться в коллекциях (в памяти).

- Реализовать CRUD (Create, Read, Update, Delete) операции для управления пользователями и транзакциями.

- Реализовать авторизацию и аутентификацию пользователей.

- Написать unit-тесты для обеспечения покрытия кода не менее 75% (использовать JUnit5, Mockito, AssertJ).

